Welcome to Racket v8.15 [cs].
racket@> (require "uv/calculus.rkt")
uv/calculus.rkt:5:9: provide: provided identifier is not defined or required
  at: uv/l2-loss
  in: (provide uv/sqr uv/line uv/l2-loss uv/line-eq uv/loss-line uv/loss-line-m uv/gradient)
  location...:
   uv/calculus.rkt:5:9
  context...:
   /Users/ugo/.config/emacs/elpa/geiser-racket-20210421.125/src/geiser/enter.rkt:104:6
   /Applications/Racket v8.15/collects/racket/repl.rkt:11:26
racket@> (require "uv/calculus.rkt")
racket@> (define x (set))
racket@> x
(set)
racket@> (set-add x 4[])
stdin::189185: #%app: missing procedure expression;
 probably originally (), which is an illegal empty application
  in: (#%app)
  location...:
   stdin::189185
  context...:
   /Applications/Racket v8.15/collects/racket/repl.rkt:11:26
racket@> (set-add x 4)
(set 4)
racket@> x
(set)
racket@> (set-add! x 4)
set-add!:
expected: (or/c set-mutable? set-weak?)
given immutable set: (set)
argument position: 1st
  context...:
   /Applications/Racket v8.15/collects/racket/private/set-types.rkt:678:0: body of top-level
   /Applications/Racket v8.15/collects/racket/repl.rkt:11:26
racket@> (length x)
length: contract violation
  expected: list?
  given: (set)
  context...:
   body of top-level
   /Applications/Racket v8.15/collects/racket/repl.rkt:11:26
racket@> (set-length x)
set-length: undefined;
 cannot reference an identifier before its definition
  in module: top-level
  context...:
   body of top-level
   /Applications/Racket v8.15/collects/racket/repl.rkt:11:26
racket@> (set-count x)
0
racket@> (require "uv/utility.rkt")
racket@> (sample-sequence 45)
sample-sequence: undefined;
 cannot reference an identifier before its definition
  in module: top-level
  context...:
   body of top-level
   /Applications/Racket v8.15/collects/racket/repl.rkt:11:26
racket@> (define sample-sequence
  (lambda (size)
    (set->list (sampled-sequence n (set)))))

(define sampled-sequence
  (lambda (size acc)
    (if (= (set-count acc) size)
        (acc)
        (sampled-sequence (- n 1) (set-add acc (random size))))))

racket@> racket@> 
racket@> 
racket@> (sample-sequence 4)
n: undefined;
 cannot reference an identifier before its definition
  in module: top-level
  context...:
   body of top-level
   stdin::364597: sample-sequence
   /Applications/Racket v8.15/collects/racket/repl.rkt:11:26
racket@> (define sample-sequence
  (lambda (size)
    (set->list (sampled-sequence size (set)))))

(define sampled-sequence
  (lambda (size acc)
    (if (= (set-count acc) size)
        (acc)
        (sampled-sequence size (set-add acc (random size))))))

racket@> racket@> 
racket@> (sample-sequence 4)
application: not a procedure;
 expected a procedure that can be applied to arguments
  given: (set 0 1 2 3)
  context...:
   body of top-level
   stdin::383034: sample-sequence
   /Applications/Racket v8.15/collects/racket/repl.rkt:11:26
racket@> (define sample-sequence
  (lambda (size)
    (set->list (sampled-sequence size (set)))))

(define sampled-sequence
  (lambda (size acc)
    (if (= (set-count acc) size)
        acc
        (sampled-sequence size (set-add acc (random size))))))

racket@> racket@> (sample-sequence 4)
'(3 2 1 0)
racket@> (sample-sequence 10)
'(9 8 7 6 5 4 3 2 1 0)
racket@> (define sample-sequence
  (lambda (size max-index)
    (set->list (sampled-sequence size max-inded (set)))))

(define sampled-sequence
  (lambda (size acc)
    (if (= (set-count acc) size)
        acc
        (sampled-sequence size (set-add acc (random max-index))))))

racket@> racket@> 
racket@> (sample-sequence 4 500)
max-inded: undefined;
 cannot reference an identifier before its definition
  in module: top-level
  context...:
   body of top-level
   stdin::427714: sample-sequence
   /Applications/Racket v8.15/collects/racket/repl.rkt:11:26
racket@> (define sample-sequence
  (lambda (size max-index)
    (set->list (sampled-sequence size max-index (set)))))

(define sampled-sequence
  (lambda (size max-index acc)
    (if (= (set-count acc) size)
        acc
        (sampled-sequence size (set-add acc (random max-index))))))

racket@> racket@> 
racket@> (define sample-sequence
  (lambda (size max-index)
    (set->list (sampled-sequence size max-index (set)))))

(define sampled-sequence
  (lambda (size max-index acc)
    (if (= (set-count acc) size)
        acc
        (sampled-sequence size (set-add acc (random max-index))))))

racket@> racket@> 
racket@> (sample-sequence 4 500)
sampled-sequence: arity mismatch;
 the expected number of arguments does not match the given number
  expected: 3
  given: 2
  context...:
   stdin::439934: body of top-level
   /Applications/Racket v8.15/collects/racket/repl.rkt:11:26
racket@> (sample-sequence 4 500)
sampled-sequence: arity mismatch;
 the expected number of arguments does not match the given number
  expected: 3
  given: 2
  context...:
   stdin::439934: body of top-level
   /Applications/Racket v8.15/collects/racket/repl.rkt:11:26
racket@> (define sample-sequence
  (lambda (size max-index)
    (set->list (sampled-sequence size max-index (set)))))

(define sampled-sequence
  (lambda (size max-index acc)
    (if (= (set-count acc) size)
        acc
        (sampled-sequence size max-index (set-add acc (random max-index))))))

racket@> racket@> 
racket@> 
racket@> (sample-sequence 4 500)
'(374 6 471 50)
racket@> (for-each (lambda (i x y) (vector-set! y i (vector-ref x i))) idx v1 v2) 
idx: undefined;
 cannot reference an identifier before its definition
  in module: top-level
  context...:
   body of top-level
   /Applications/Racket v8.15/collects/racket/repl.rkt:11:26
racket@> (define idx '(2 1 0))
racket@> (define v1 (vector 10 20 30))
racket@> (define v2 (make-vector 3))
racket@> (for-each (lambda (i x y) (vector-set! y i (vector-ref x i))) idx v1 v2) 
for-each: contract violation
  expected: list?
  given: '#(10 20 30)
  context...:
   body of top-level
   /Applications/Racket v8.15/collects/racket/private/map.rkt:267:2: gen-for-each
   /Applications/Racket v8.15/collects/racket/repl.rkt:11:26
racket@> (for-each (lambda (i x y) (vector-set! y i (vector-ref x i))) idx (list v1 v1 v1) 
                   (list v2 v2 v2))
racket@> v2
'#(10 20 30)
racket@> (define v (vector))
racket@> (vector-append v 3)
vector-append: contract violation
  expected: vector?
  given: 3
  context...:
   body of top-level
   /Applications/Racket v8.15/collects/racket/repl.rkt:11:26
racket@> (vector-append 3 v)
vector-append: contract violation
  expected: vector?
  given: 3
  context...:
   body of top-level
   /Applications/Racket v8.15/collects/racket/repl.rkt:11:26
racket@> (vector-append v (vector 3))
'#(3)
racket@> v
'#()
racket@> (make-list 4 (vector))
'(#() #() #() #())
racket@> (define extract-sub-vectors
  (lambda (indices xs)
    (extracted indices xs (make-list (length xs) (vector))))) ;;xs is a list of vector

(define extracted
  (lambda (indices xs acc)
    (if (empty? indices)
        acc
        (let ((i (car indices)))
          (for-each (lambda (xs ys) (vector-append! ys (vector-ref xs i))) xs acc)
          (extracted (cdr indices) xs acc)))))

racket@> racket@> ()
stdin::1164286: #%app: missing procedure expression;
 probably originally (), which is an illegal empty application
  in: (#%app)
  location...:
   stdin::1164286
  context...:
   /Applications/Racket v8.15/collects/racket/repl.rkt:11:26
racket@> (define v1 (vector 1 2 3 4 5))
racket@> (define v2 (vector 6 7 8 1 3))
racket@> (define indices '(3 2 0))
racket@> (extract-sub-vectors indices (list v1 v2))
vector-append!: undefined;
 cannot reference an identifier before its definition
  in module: top-level
  context...:
   body of top-level
   stdin::1164051: extracted
   /Applications/Racket v8.15/collects/racket/repl.rkt:11:26
racket@> (define vector-append!
  (lambda (v e)
    (set! v (vector-append v (vector e)))))
racket@> (define extract-sub-vectors
  (lambda (indices xs)
    (extracted indices xs (make-list (length xs) (vector))))) ;;xs is a list of vector

(define extracted
  (lambda (indices xs acc)
    (if (empty? indices)
        acc
        (let ((i (car indices)))
          (for-each (lambda (xs ys) (vector-append! ys (vector-ref xs i))) xs acc)
          (extracted (cdr indices) xs acc)))))

racket@> racket@> (extract-sub-vectors indices (list v1 v2))
'(#() #())
racket@> (define i 2)
racket@> (for-each (lambda (xs ys) (vector-append! ys (vector-ref xs i))) 
                   (list v1 v2) (li
                                 )
                   )
li: undefined;
 cannot reference an identifier before its definition
  in module: top-level
  context...:
   body of top-level
   /Applications/Racket v8.15/collects/racket/repl.rkt:11:26
racket@> (define out (list (vector) (vector)))
racket@> (for-each (lambda (xs ys) (vector-append! ys (vector-ref xs i))) 
                   (list v1 v2) out)
racket@> out
'(#() #())
racket@> (define vv (vector))
racket@> (vector-append! v 4)
racket@> v
'#()
racket@> vv
'#()
racket@> (set! vv (vector-append vv (vector 3)))
racket@> vv
'#(3)
racket@> (define vector-append!
  (lambda (v e)
    (let ((v (vector-append v (vector e))))
      v)))

racket@> (vector-append! vv 5)
'#(3 5)
racket@> (for-each (lambda (xs ys) (vector-append! ys (vector-ref xs i))) 
                   (list v1 v2) out)
racket@> out
'(#() #())
racket@> vv
'#(3)
racket@> (for-each (lambda (xs ys) (set! ys (vector-append ys (vector (vector-ref xs i))))) 
                   (list v1 v2) out)
racket@> out
'(#() #())
racket@> (map (lambda (xs ys) (vector-append ys (vector (vector-ref xs i)))) 
                   (list v1 v2) out)
'(#(3) #(8))
racket@> (define extract-sub-vectors
  (lambda (indices xs)
    (extracted indices xs (make-list (length xs) (vector))))) ;;xs is a list of vector

(define extracted
  (lambda (indices vs acc)
    (if (empty? indices)
        acc
        (let ((i (car indices))
              (a (map (lambda (xs ys)
                        (vector-append ys
                                       (vector
                                        (vector-ref xs i)))) vs acc)))
          (extracted (cdr indices) vs a)))))

racket@> racket@> 
racket@> (extract-sub-vectors indices v1 v2)
extract-sub-vectors: arity mismatch;
 the expected number of arguments does not match the given number
  expected: 2
  given: 3
  context...:
   body of top-level
   /Applications/Racket v8.15/collects/racket/repl.rkt:11:26
racket@> (extract-sub-vectors indices (list v1 v2))
'(#(3 3 3) #(8 8 8))
racket@> (define extract-sub-vectors
  (lambda (indices xs)
    (extracted indices xs (make-list (length xs) (vector))))) ;;xs is a list of vector

(define extracted
  (lambda (indices vs acc)
    (if (empty? indices)
        acc
        (let ((i (car indices))
              (a (map (lambda (xs ys)
                        (vector-append ys
                                       (vector
                                        (vector-ref xs i)))) vs acc)))
          (begin
            (displayln i)
            (extracted (cdr indices) vs a))))))

racket@> racket@> 
racket@> (extract-sub-vectors indices (list v1 v2))
3
2
0
'(#(3 3 3) #(8 8 8))
racket@> (define extract-sub-vectors
  (lambda (indices xs)
    (extracted indices xs (make-list (length xs) (vector))))) ;;xs is a list of vector

(define extracted
  (lambda (indices vs acc)
    (if (empty? indices)
        acc
        (let ((i (car indices))
              (a (map (lambda (xs ys)
                        (vector-append ys
                                       (vector
                                        (vector-ref xs i)))) vs acc)))
          (begin
            (displayln i)
            (displayln acc)
            (extracted (cdr indices) vs a))))))

racket@> racket@> (extract-sub-vectors indices (list v1 v2))
3
(#() #())
2
(#(3) #(8))
0
(#(3 3) #(8 8))
'(#(3 3 3) #(8 8 8))
racket@> (define extract-sub-vectors
  (lambda (indices xs)
    (extracted indices xs (make-list (length xs) (vector))))) ;;xs is a list of vector

(define extracted
  (lambda (indices vs acc)
    (if (empty? indices)
        acc
        (let* ((i (car indices))
              (a (map (lambda (xs ys)
                        (vector-append ys
                                       (vector
                                        (vector-ref xs i)))) vs acc)))
          (begin
            (displayln i)
            (displayln acc)
            (extracted (cdr indices) vs a))))))

racket@> racket@> (extract-sub-vectors indices (list v1 v2))
3
(#() #())
2
(#(4) #(1))
0
(#(4 3) #(1 8))
'(#(4 3 1) #(1 8 6))
racket@> (define extract-sub-vectors
  (lambda (indices xs)
    (extracted indices xs (make-list (length xs) (vector))))) ;;xs is a list of vector

(define extracted
  (lambda (indices vs acc)
    (if (empty? indices)
        acc
        (let* ((i (car indices))
              (a (map (lambda (xs ys)
                        (vector-append ys
                                       (vector
                                        (vector-ref xs i)))) vs acc)))
            (extracted (cdr indices) vs a)))))

racket@> racket@> (extract-sub-vectors indices (list v1 v2))
'(#(4 3 1) #(1 8 6))
racket@> (extract-sub-vectors (sample-sequence 3 5) (list v1 v2))
'(#(3 2 1) #(8 7 6))
racket@> (extract-sub-vectors (sample-sequence 3 5) (list v1 v2))
'(#(4 3 1) #(1 8 6))
racket@> 
racket@> 